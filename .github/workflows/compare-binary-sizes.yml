name: Compare Binary Sizes
description: Compute a pull request's impact on binary file sizes when compared to the base ref.
author: Kendal Harland

on:
  workflow_call:
    inputs:
      paths:
        description: 'A list of paths to files to diff, relative to the repository root directory.'
        required: true

env:
  SOURCE_ROOT: ${{ github.workspace }}/source
  BUILD_ROOT: ${{ github.workspace }}/build
  BLOATY_CACHE_KEY: bloaty
  BLOATY_CACHE_PATH: cache/bin/bloaty
  BLOATY_OUTPUT_FILE: ${{ github.workspace }}/bloaty-output.csv

jobs:
  bloaty:
    name: Build bloaty
    runs-on: windows-latest

    steps:
      - name: Setup bloaty cache
        id: cache
        uses: actions/cache@v4
        with:
          key: ${{ env.BLOATY_CACHE_KEY }}
          path: ${{ env.BLOATY_CACHE_PATH }}

      - name: Checkout google/bloaty@34f4a66559ad4938c1e629e9b5f54630b2b4d7b0
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: google/bloaty
          ref: refs/heads/main
          path: ${{ env.SOURCE_ROOT }}/bloaty
          show-progress: false

      # This step installs Ninja.
      - name: Setup VS dev environment.
        if: steps.cache.outputs.cache-hit != 'true'
        uses: compnerd/gha-setup-vsdevenv@main
        with:
          host_arch: amd64
          components: 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64'
          arch: amd64

      - name: Configure bloaty
        if: steps.cache.outputs.cache-hit != 'true'
        run: cmake -B ${{ env.BUILD_ROOT }}/bloaty -S ${{ env.SOURCE_ROOT }}/bloaty -G Ninja

      - name: Build bloaty
        if: steps.cache.outputs.cache-hit != 'true'
        run: cmake --build ${{ env.BUILD_ROOT }}/bloaty

      - name: Add bloaty to the cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          New-Item -Path ${{ env.BLOATY_CACHE_PATH }} -ItemType Directory -Force | Out-Null
          Copy-Item ${{ env.BUILD_ROOT }}/bloaty/bloaty.exe -Destination ${{ env.BLOATY_CACHE_PATH }}

  binary_size_info:
    name: Compute binary size information
    needs: [bloaty]
    runs-on: windows-latest

    env:
      BLOATY_OPTIONS_FILE: ${{ github.workspace }}/bloaty.textproto

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Restore bloaty
        uses: actions/cache/restore@v3
        with:
          key: ${{ env.BLOATY_CACHE_KEY }}
          path: ${{ env.BLOATY_CACHE_PATH }}

      - name: Add bloaty to PATH
        run: echo ${{ env.BLOATY_CACHE_PATH }} | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # For the options file schema, see https://github.com/google/bloaty/blob/main/src/bloaty.proto.
      - name: Generate bloaty options file
        run: |
          New-Item -Path ${{ env.BLOATY_OPTIONS_FILE }}

          # Generate the list of input files.
          # Each input filename must be an absolute path.
          # Unix-style path separators are required.
          # The textproto output must be ascii encoded.
          foreach($path in ${{ inputs.paths }})) {
            echo "filename: `"${path}`"" } | `
            %{ $_ -replace '\\','/' } | `
            Out-File ${{ env.BLOATY_OPTIONS_FILE }} -Append -Encoding ascii
          }

          echo "sort_by: SORTBY_FILESIZE" | Out-File ${{ env.BLOATY_OPTIONS_FILE }} -Append -Encoding ascii

          # These are the only data sources supported by bloaty's PE/COFF format.
          echo "data_source: `"inputfiles`"" | Out-File ${{ env.BLOATY_OPTIONS_FILE }} -Append -Encoding ascii
          echo "data_source: `"segments`"" | Out-File ${{ env.BLOATY_OPTIONS_FILE }} -Append -Encoding ascii

      - name: Show bloaty options file
        run: Get-Content -Path ${{ env.BLOATY_OPTIONS_FILE }}

      - name: Run bloaty
        run: bloaty -c ${{ env.BLOATY_OPTIONS_FILE }} -w -n 0 --csv | Out-File ${{ env.BLOATY_OUTPUT_FILE }} -Encoding utf8

      - name: Cache bloaty output
        id: cache
        uses: actions/cache/save@v3
        with:
          key: ${{ env.BLOATY_CACHE_KEY }}
          path: ${{ env.BLOATY_OUTPUT_FILE }}
